from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase


class PerevalAPITests(APITestCase):

    def setUp(self):
        self.test_data = {
            "beauty_title": "–ø–µ—Ä.",
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª",
            "other_titles": "–¢–µ—Å—Ç",
            "connect": "",
            "add_time": "2021-09-22 13:18:13",
            "user": {
                "email": "test@example.com",
                "phone": "+79001234567",
                "fam": "–ò–≤–∞–Ω–æ–≤",
                "name": "–ò–≤–∞–Ω",
                "otc": "–ò–≤–∞–Ω–æ–≤–∏—á"
            },
            "coords": {
                "latitude": "45.3842",
                "longitude": "7.1525",
                "height": "1200"
            },
            "level": {
                "winter": "",
                "summer": "1–ê",
                "autumn": "1–ê",
                "spring": ""
            },
            "images": [
                {
                    "data": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==",
                    "title": "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                }
            ]
        }

    def test_complete_workflow(self):

        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞...")
        url = reverse('submit_data')
        response = self.client.post(url, self.test_data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['status'], 200)
        pereval_id = response.data['id']
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä–µ–≤–∞–ª —Å ID: {pereval_id}")

        print("2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –ø–æ ID...")
        url = reverse('pereval_detail', kwargs={'pk': pereval_id})
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['title'], "–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–∞–ª")
        self.assertEqual(response.data['status'], 'new')
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        print("3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–∞–ª–∞...")
        update_data = {
            "title": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            "level": {
                "summer": "2–ê"
            }
        }
        response = self.client.patch(url, update_data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['state'], 1)
        print("‚úÖ –ü–µ—Ä–µ–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")

        print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        response = self.client.get(url)
        self.assertEqual(response.data['title'], "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        self.assertEqual(response.data['level']['summer'], "2–ê")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å")

        print("5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ email...")
        url = reverse('get_user_perevals') + '?user__email=test@example.com'
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['user']['email'], 'test@example.com')
        print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ email —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    def test_validation_errors(self):

        invalid_data = self.test_data.copy()
        invalid_data['title'] = ''

        url = reverse('submit_data')
        response = self.client.post(url, invalid_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_user_data_protection(self):

        url = reverse('submit_data')
        response = self.client.post(url, self.test_data, format='json')
        pereval_id = response.data['id']

        update_data = {
            "user": {
                "email": "hacker@example.com"
            }
        }

        url = reverse('pereval_detail', kwargs={'pk': pereval_id})
        response = self.client.patch(url, update_data, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertEqual(response.data['state'], 0)